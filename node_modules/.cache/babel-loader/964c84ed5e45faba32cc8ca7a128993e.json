{"ast":null,"code":"var _jsxFileName = \"/Users/junaidsaleem/Desktop/weatherApp/weather/React/src/components/WeatherComponent.js\";\nimport React, { Component } from 'react';\nimport Select from 'react-select';\nimport AsyncSelect from 'react-select/async';\nimport Container from 'react-bootstrap/Container';\nimport Header from './HeaderComponent';\nimport Footer from './FooterComponent';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport BarChart from 'react-bar-chart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass WeatherMain extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = selected => {\n      this.setState({\n        selectedOption: selected\n      });\n    };\n\n    this.state = {\n      locationData: [],\n      temperatureData: [],\n      error: null,\n      citiesData: [],\n      viewSelect: false,\n      selectedOption: null,\n      dailyForecast: null,\n      weeklyForecast: null,\n      apiCalled: false,\n      width: 400,\n      chartData: [{\n        text: 'Minimum Temperature',\n        value: 0\n      }, {\n        text: 'Maximum Temperature',\n        value: 0\n      }],\n      weeklyData: []\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.getDayData = this.getDayData.bind(this);\n    this.getWeeklyData = this.getWeeklyData.bind(this); //this.getCityData = this.getCityData.bind(this);\n\n    this.getDataService = this.getDataService.bind(this);\n    this.jsonData = null;\n    this.ldata = null;\n  }\n\n  async getDataService(url, value, param) {\n    var data = await fetch(url + value + param + process.env.REACT_APP_API_KEY + \"&language=en-us\");\n    var json = await data.json();\n    return json;\n  } // async getCityData(value) {\n  //     var data = await fetch(process.env.REACT_APP_CITY_URL + value + \"&apikey=\" + process.env.REACT_APP_API_KEY + \"&language=en-us\")\n  //     var json = await data.json()\n  //     return json;\n  // }\n\n\n  async getWeeklyData() {\n    const data = this.jsonData;\n    let max = null,\n        min = null;\n\n    if (this.state.selectedOption != null) {\n      const city = data[this.state.selectedOption.value].Key;\n      const data = await this.getDataService(process.env.REACT_APP_DAY_URL, city, process.env.REACT_APP_FORECAST_PARAM); // fetch(process.env.REACT_APP_WEEK_URL + city + \"?apikey=\" + process.env.REACT_APP_API_KEY + \"&language=en-us\")\n      //     .then(res => res.json())\n      //     .then(\n      //         (result) => {\n      //             this.setState({\n      //                 weeklyForecast: result\n      //             });\n      //             const data = this.state.weeklyForecast;\n      //             if (data != null) {\n      //                 for (let i = 0; i < data.DailyForecasts.length && this.state.weeklyData.length < 5; i++) {\n      //                     min = data.DailyForecasts[i].Temperature.Minimum.Value\n      //                     max = data.DailyForecasts[i].Temperature.Maximum.Value\n      //                     let dateObj = new Date(data.DailyForecasts[i].Date)\n      //                     this.state.weeklyData.push(\n      //                         { minimum: min, maximum: max, date: dateObj.toDateString() }\n      //                     )\n      //                 }\n      //             }\n      //         },\n      //         (error) => {\n      //             this.setState({\n      //                 error\n      //             });\n      //         }\n      //     )\n    }\n  }\n\n  async getDayData() {\n    const jsonData = this.jsonData;\n    let max = null,\n        min = null;\n\n    if (this.state.selectedOption != null && this.state.apiCalled) {\n      const city = jsonData[this.state.selectedOption.value].Key;\n      const data = await this.getDataService(process.env.REACT_APP_DAY_URL, city, process.env.REACT_APP_FORECAST_PARAM);\n\n      if (data != null) {\n        min = data.DailyForecasts[0].Temperature.Minimum.Value;\n        max = data.DailyForecasts[0].Temperature.Maximum.Value;\n      }\n\n      this.setState({\n        apiCalled: false,\n        chartData: [{\n          text: 'Minimum Temperature',\n          value: min\n        }, {\n          text: 'Maximum Temperature',\n          value: max\n        }]\n      }); // fetch(process.env.REACT_APP_DAY_URL + city + \"?apikey=\" + process.env.REACT_APP_API_KEY + \"&language=en-us\")\n      //     .then(res => res.json())\n      //     .then(\n      //         (result) => {\n      //             this.setState({\n      //                 dailyForecast: result\n      //             });\n      //             const data = this.state.dailyForecast;\n      //             if (data != null) {\n      //                 min = data.DailyForecasts[0].Temperature.Minimum.Value\n      //                 max = data.DailyForecasts[0].Temperature.Maximum.Value\n      //             }\n      //             this.setState({\n      //                 apiCalled: false,\n      //                 chartData: [\n      //                     { text: 'Minimum Temperature', value: min },\n      //                     { text: 'Maximum Temperature', value: max }\n      //                 ]\n      //             },\n      //                 () => {\n      //                     this.getWeeklyData()\n      //                 });\n      //         },\n      //         (error) => {\n      //             this.setState({\n      //                 error\n      //             });\n      //         }\n      //     )\n    }\n  }\n\n  async handleInputChange(value) {\n    this.setState({\n      citiesData: []\n    });\n\n    if (value.length > 0) {\n      const data = await this.getDataService(process.env.REACT_APP_CITY_URL, value, process.env.REACT_APP_CITY_PARAM);\n      this.jsonData = data;\n\n      for (let i = 0; i < data.length; i++) {\n        this.state.citiesData.push({\n          label: data[i].LocalizedName + \",\" + data[i].AdministrativeArea.LocalizedName + \",\" + data[i].Country.LocalizedName,\n          value: i\n        });\n      }\n\n      this.setState({\n        apiCalled: true,\n        selectedOption: null\n      });\n      return this.state.citiesData;\n    }\n  }\n\n  async componentDidUpdate() {\n    await this.getDayData();\n    await this.getWeeklyData();\n  }\n\n  render() {\n    const margin = {\n      top: 20,\n      right: 0,\n      bottom: 30,\n      left: 40\n    };\n    const weeklyForecastList = this.state.weeklyData.map(d => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Date: \", d.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Minimum: \", d.minimum, \"F\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Maximum: \", d.maximum, \"F\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          className: \"justify-content-md-center\",\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            lg: \"4\",\n            children: /*#__PURE__*/_jsxDEV(AsyncSelect, {\n              cacheOptions: true,\n              defaultOptions: true,\n              placeholder: \"Search a city\",\n              loadOptions: this.handleInputChange,\n              onChange: this.handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          className: \"justify-content-md-center\",\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            lg: \"4\",\n            children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \" Daily Temperature Graph\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          className: \"justify-content-md-center\",\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            lg: \"4\",\n            children: /*#__PURE__*/_jsxDEV(BarChart, {\n              ylabel: \"Daily Forecast in F\",\n              width: this.state.width,\n              height: 500,\n              margin: margin,\n              data: this.state.chartData\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          className: \"justify-content-md-center\",\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            lg: \"4\",\n            children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \" Weekly Forecast\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          className: \"justify-content-md-center\",\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            lg: \"4\",\n            children: weeklyForecastList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default WeatherMain;","map":{"version":3,"sources":["/Users/junaidsaleem/Desktop/weatherApp/weather/React/src/components/WeatherComponent.js"],"names":["React","Component","Select","AsyncSelect","Container","Header","Footer","Row","Col","BarChart","WeatherMain","constructor","props","handleChange","selected","setState","selectedOption","state","locationData","temperatureData","error","citiesData","viewSelect","dailyForecast","weeklyForecast","apiCalled","width","chartData","text","value","weeklyData","handleInputChange","bind","getDayData","getWeeklyData","getDataService","jsonData","ldata","url","param","data","fetch","process","env","REACT_APP_API_KEY","json","max","min","city","Key","REACT_APP_DAY_URL","REACT_APP_FORECAST_PARAM","DailyForecasts","Temperature","Minimum","Value","Maximum","length","REACT_APP_CITY_URL","REACT_APP_CITY_PARAM","i","push","label","LocalizedName","AdministrativeArea","Country","componentDidUpdate","render","margin","top","right","bottom","left","weeklyForecastList","map","d","date","minimum","maximum"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Select from 'react-select';\nimport AsyncSelect from 'react-select/async';\nimport Container from 'react-bootstrap/Container';\nimport Header from './HeaderComponent';\nimport Footer from './FooterComponent';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport BarChart from 'react-bar-chart';\n\nclass WeatherMain extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            locationData: [],\n            temperatureData: [],\n            error: null,\n            citiesData: [],\n            viewSelect: false,\n            selectedOption: null,\n            dailyForecast: null,\n            weeklyForecast: null,\n            apiCalled: false,\n            width: 400,\n            chartData: [\n                { text: 'Minimum Temperature', value: 0 },\n                { text: 'Maximum Temperature', value: 0 }\n            ],\n            weeklyData: []\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.getDayData = this.getDayData.bind(this);\n        this.getWeeklyData = this.getWeeklyData.bind(this);\n        //this.getCityData = this.getCityData.bind(this);\n        this.getDataService = this.getDataService.bind(this);\n        this.jsonData = null;\n        this.ldata = null;\n    }\n\n    async getDataService(url, value, param) {\n        var data = await fetch(url + value + param + process.env.REACT_APP_API_KEY + \"&language=en-us\")\n        var json = await data.json()\n        return json;\n    }\n    // async getCityData(value) {\n    //     var data = await fetch(process.env.REACT_APP_CITY_URL + value + \"&apikey=\" + process.env.REACT_APP_API_KEY + \"&language=en-us\")\n    //     var json = await data.json()\n    //     return json;\n    // }\n\n    async getWeeklyData() {\n        const data = this.jsonData;\n        let max = null, min = null;\n        if (this.state.selectedOption != null) {\n            const city = data[this.state.selectedOption.value].Key\n            const data = await this.getDataService(process.env.REACT_APP_DAY_URL, city, process.env.REACT_APP_FORECAST_PARAM)\n            // fetch(process.env.REACT_APP_WEEK_URL + city + \"?apikey=\" + process.env.REACT_APP_API_KEY + \"&language=en-us\")\n            //     .then(res => res.json())\n            //     .then(\n            //         (result) => {\n            //             this.setState({\n            //                 weeklyForecast: result\n            //             });\n            //             const data = this.state.weeklyForecast;\n            //             if (data != null) {\n            //                 for (let i = 0; i < data.DailyForecasts.length && this.state.weeklyData.length < 5; i++) {\n            //                     min = data.DailyForecasts[i].Temperature.Minimum.Value\n            //                     max = data.DailyForecasts[i].Temperature.Maximum.Value\n            //                     let dateObj = new Date(data.DailyForecasts[i].Date)\n            //                     this.state.weeklyData.push(\n            //                         { minimum: min, maximum: max, date: dateObj.toDateString() }\n            //                     )\n            //                 }\n            //             }\n            //         },\n            //         (error) => {\n            //             this.setState({\n            //                 error\n            //             });\n            //         }\n            //     )\n        }\n    }\n\n    async getDayData() {\n        const jsonData = this.jsonData;\n        let max = null, min = null;\n        if (this.state.selectedOption != null && this.state.apiCalled) {\n            const city = jsonData[this.state.selectedOption.value].Key\n            const data = await this.getDataService(process.env.REACT_APP_DAY_URL, city, process.env.REACT_APP_FORECAST_PARAM)\n            if (data != null) {\n                min = data.DailyForecasts[0].Temperature.Minimum.Value\n                max = data.DailyForecasts[0].Temperature.Maximum.Value\n            }\n            this.setState({\n                apiCalled: false,\n                chartData: [\n                    { text: 'Minimum Temperature', value: min },\n                    { text: 'Maximum Temperature', value: max }\n                ]\n            });\n            // fetch(process.env.REACT_APP_DAY_URL + city + \"?apikey=\" + process.env.REACT_APP_API_KEY + \"&language=en-us\")\n            //     .then(res => res.json())\n            //     .then(\n            //         (result) => {\n            //             this.setState({\n            //                 dailyForecast: result\n            //             });\n            //             const data = this.state.dailyForecast;\n            //             if (data != null) {\n            //                 min = data.DailyForecasts[0].Temperature.Minimum.Value\n            //                 max = data.DailyForecasts[0].Temperature.Maximum.Value\n            //             }\n            //             this.setState({\n            //                 apiCalled: false,\n            //                 chartData: [\n            //                     { text: 'Minimum Temperature', value: min },\n            //                     { text: 'Maximum Temperature', value: max }\n            //                 ]\n            //             },\n            //                 () => {\n            //                     this.getWeeklyData()\n            //                 });\n            //         },\n            //         (error) => {\n            //             this.setState({\n            //                 error\n            //             });\n            //         }\n            //     )\n        }\n    }\n\n    handleChange = (selected) => {\n        this.setState({\n            selectedOption: selected,\n        });\n    };\n\n    async handleInputChange(value) {\n        this.setState({\n            citiesData: []\n        })\n        if (value.length > 0) {\n            const data = await this.getDataService(process.env.REACT_APP_CITY_URL, value, process.env.REACT_APP_CITY_PARAM)\n            this.jsonData = data;\n            for (let i = 0; i < data.length; i++) {\n                this.state.citiesData.push({ label: data[i].LocalizedName + \",\" + data[i].AdministrativeArea.LocalizedName + \",\" + data[i].Country.LocalizedName, value: i })\n            }\n            this.setState({\n                apiCalled: true,\n                selectedOption: null\n            })\n            return this.state.citiesData;\n        }\n    }\n\n    async componentDidUpdate() {\n        await this.getDayData()\n        await this.getWeeklyData()\n    }\n\n    render() {\n        const margin = { top: 20, right: 0, bottom: 30, left: 40 };\n        const weeklyForecastList = this.state.weeklyData.map((d) =>\n            <div>\n                <li>Date: {d.date}</li>\n                <li>Minimum: {d.minimum}F</li>\n                <li>Maximum: {d.maximum}F</li>\n                <br></br>\n            </div>\n        );\n        return (\n            <div>\n                <Header />\n                <Container>\n                    <br></br>\n                    <Row className=\"justify-content-md-center\">\n                        <Col lg=\"4\">\n                            {/* <Select\n                                placeholder=\"Search a city\"\n                                //options={this.state.citiesData}\n                                onInputChange={this.handleInputChange}\n                                onChange={this.handleChange}\n                            /> */}\n                            <AsyncSelect\n                                cacheOptions\n                                defaultOptions\n                                placeholder=\"Search a city\"\n                                loadOptions={this.handleInputChange}\n                                onChange={this.handleChange}\n                            />\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-md-center\">\n                        <Col lg=\"4\">\n                            <br></br>\n                            <h3> Daily Temperature Graph</h3>\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-md-center\">\n                        <Col lg=\"4\">\n                            <BarChart ylabel='Daily Forecast in F'\n                                width={this.state.width}\n                                height={500}\n                                margin={margin}\n                                data={this.state.chartData} />\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-md-center\">\n                        <Col lg=\"4\">\n                            <br></br>\n                            <h3> Weekly Forecast</h3>\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-md-center\">\n                        <Col lg=\"4\">\n                            {weeklyForecastList}\n                        </Col>\n                    </Row>\n                </Container>\n                <Footer />\n            </div>\n        )\n    }\n}\n\nexport default WeatherMain;"]},"metadata":{},"sourceType":"module"}